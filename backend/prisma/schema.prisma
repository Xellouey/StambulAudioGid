// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  deviceId  String   @unique
  platform  String?  // 'ios', 'android_gplay', 'android_rustore'
  createdAt DateTime @default(now())

  purchases Purchase[]

  @@map("users")
}

model Tour {
  id                   String   @id @default(uuid())
  title                String
  description          String
  fullDescription      String?
  bannerUrl            String?
  audioDescriptionUrl  String?
  durationMinutes      Int?
  distanceMeters       Int?
  priceCents           Int      @default(0)
  attributes           Json     @default("[]") // ['new', 'popular']
  routeData            Json?    // GeoJSON route data
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  pois      POI[]
  purchases Purchase[]

  @@map("tours")
}

model POI {
  id          String   @id @default(uuid())
  tourId      String
  title       String
  description String
  audioUrl    String?
  latitude    Decimal  @db.Decimal(10, 8)
  longitude   Decimal  @db.Decimal(11, 8)
  isFree      Boolean  @default(false)
  orderIndex  Int
  createdAt   DateTime @default(now())

  tour Tour @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@map("pois")
}

model Purchase {
  id            String         @id @default(uuid())
  userId        String
  tourId        String
  platform      String         // 'ios', 'android_gplay', 'android_rustore'
  transactionId String?
  receiptData   String?        // Platform-specific receipt data
  purchasedAt   DateTime       @default(now())
  expiresAt     DateTime?

  user User @relation(fields: [userId], references: [id])
  tour Tour @relation(fields: [tourId], references: [id])

  @@map("purchases")
}

// Admin users will be handled separately through a different authentication system
// No enums needed for the current requirements